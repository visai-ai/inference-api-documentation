"use strict";(self.webpackChunkvisai_inference_api_documentation=self.webpackChunkvisai_inference_api_documentation||[]).push([[6650],{81215:(e,t,n)=>{n.d(t,{Z:()=>a});var o,r=n(67294);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s.apply(this,arguments)}const a=e=>{let{title:t,titleId:n,...a}=e;return r.createElement("svg",s({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},a),t?r.createElement("title",{id:n},t):null,o||(o=r.createElement("path",{d:"M4 16.242A4.5 4.5 0 0 1 6.08 8.02a6.002 6.002 0 0 1 11.84 0A4.5 4.5 0 0 1 20 16.242M8 16l4-4m0 0 4 4m-4-4v9",stroke:"#000",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"})))}},22130:(e,t,n)=>{n.d(t,{Z:()=>a});var o,r=n(67294);function s(){return s=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},s.apply(this,arguments)}const a=e=>{let{title:t,titleId:n,...a}=e;return r.createElement("svg",s({width:24,height:24,viewBox:"0 0 24 24",fill:"none",xmlns:"http://www.w3.org/2000/svg","aria-labelledby":n},a),t?r.createElement("title",{id:n},t):null,o||(o=r.createElement("path",{d:"M21 3H3m15 10-6-6m0 0-6 6m6-6v14",stroke:"#000",strokeWidth:2,strokeLinecap:"round",strokeLinejoin:"round"})))}},68853:(e,t,n)=>{n.d(t,{Z:()=>i});var o=n(67294),r=n(86010),s=n(39960);const a={longRunCardContainer:"longRunCardContainer_nttB"};function i(e){let{title:t,href:n}=e;return o.createElement(s.Z,{to:n,className:(0,r.Z)("",a.longRunCardContainer)},o.createElement("span",{className:(0,r.Z)("",a.longRunTitle)},t),o.createElement("svg",{width:"20",height:"20",viewBox:"0 0 20 20",fill:"none",xmlns:"http://www.w3.org/2000/svg"},o.createElement("g",{id:"arrow-right"},o.createElement("path",{id:"Icon",d:"M4.16699 10.0001H15.8337M15.8337 10.0001L10.0003 4.16675M15.8337 10.0001L10.0003 15.8334",stroke:"currentColor",strokeWidth:"1.66667",strokeLinecap:"round",strokeLinejoin:"round"}))))}},27107:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>g,contentTitle:()=>k,default:()=>w,frontMatter:()=>y,metadata:()=>f,toc:()=>v});var o=n(87462),r=n(67294),s=n(3905),a=n(86010),i=n(39960);const l="cardContainer_MaJ8",c="iconContainer_tV4r",d="icon_Xr9C",u="readMore_acgC",h="title_R7ni",p="description_ca38";function m(e){let{Svg:t,title:n,description:o,href:s}=e;return r.createElement(i.Z,{to:s,className:(0,a.Z)("",l)},r.createElement("div",null,t&&r.createElement("div",{className:c},r.createElement(t,{className:d,role:"img"})),r.createElement("span",{className:(0,a.Z)("",h)},n),r.createElement("p",{className:(0,a.Z)("",p)},o)),r.createElement("div",{className:u},"Read more"))}var b=n(68853);const y={id:"asynchronous",title:"Asynchronous API",custom_edit_url:null},k="Asynchronous - Speech To Text",f={unversionedId:"ai-marketplace/speech-to-text/asynchronous",id:"ai-marketplace/speech-to-text/asynchronous",title:"Asynchronous API",description:"Asynchronous Methods",source:"@site/docs/ai-marketplace/speech-to-text/asynchronous.mdx",sourceDirName:"ai-marketplace/speech-to-text",slug:"/ai-marketplace/speech-to-text/asynchronous",permalink:"/inference-api-documentation/docs/ai-marketplace/speech-to-text/asynchronous",draft:!1,editUrl:null,tags:[],version:"current",frontMatter:{id:"asynchronous",title:"Asynchronous API",custom_edit_url:null}},g={},v=[{value:"Asynchronous Methods",id:"asynchronous-methods",level:2},{value:"Get Job Status by Job ID",id:"get-job-status-by-job-id",level:2},{value:"List All Jobs",id:"list-all-jobs",level:2},{value:"Cancel Job",id:"cancel-job",level:2}],j={toc:v};function w(e){let{components:t,...r}=e;return(0,s.kt)("wrapper",(0,o.Z)({},j,r,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"asynchronous---speech-to-text"},"Asynchronous - Speech To Text"),(0,s.kt)("h2",{id:"asynchronous-methods"},"Asynchronous Methods"),(0,s.kt)("p",null,"Our Asynchronous Inference API allows you to create inference jobs using two methods: by uploading a file or by providing a pre-signed URL. After creating a job, you will receive a job_id to track its status and retrieve the result."),(0,s.kt)("section",{style:{display:"grid",gap:"1rem",gridTemplateColumns:"repeat(auto-fill,minmax(320px, 1fr))"}},(0,s.kt)(m,{Svg:n(22130).Z,title:"Upload files",description:"Upload files directly to start an inference job. Once the file is processed, you'll receive a job_id to track the job.",href:"/docs/ai-marketplace/speech-to-text/asynchronous-api/uploading-file",mdxType:"AsynchronousCard"}),(0,s.kt)(m,{Svg:n(81215).Z,title:"Submit Pre-signed URLs",description:"Provide pre-signed URLs from a file upload service like AWS S3. The API will fetch and process the file, returning a job_id to track the job.",href:"/docs/ai-marketplace/speech-to-text/asynchronous-api/pre-singed-url",mdxType:"AsynchronousCard"})),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"get-job-status-by-job-id"},"Get Job Status by Job ID"),(0,s.kt)("p",null,"Use the Job API to check the status of your inference jobs and retrieve the results once processing is complete."),(0,s.kt)(b.Z,{title:"Get Job Status API",href:"/docs/ai-marketplace/speech-to-text/asynchronous-api/get-job-status",mdxType:"LinkCard"}),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"list-all-jobs"},"List All Jobs"),(0,s.kt)("p",null,"Retrieve a list of all inference jobs that have been submitted."),(0,s.kt)(b.Z,{title:"List All Jobs",href:"/docs/ai-marketplace/speech-to-text/asynchronous-api/list-jobs",mdxType:"LinkCard"}),(0,s.kt)("hr",null),(0,s.kt)("h2",{id:"cancel-job"},"Cancel Job"),(0,s.kt)("p",null,"API allows you to cancel an inference job by submitting its job_id in the request body."),(0,s.kt)(b.Z,{title:"Cancel Job",href:"/docs/ai-marketplace/speech-to-text/asynchronous-api/cancel-job",mdxType:"LinkCard"}))}w.isMDXComponent=!0}}]);